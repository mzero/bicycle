
= Machine Setup

system: Raspberry Pi 3 Model B
  - but this should work with pretty much anything since Pi 2.

display: Adafruit 128x64 OLED Bonnet for Raspberry Pi
  - https://www.adafruit.com/product/3531
  - The looper will run without this being attached and none of the UI
    requires that you see the display. But I'm developing with the assumption
    it is there.

extra: Pisound
  - https://blokas.io/pisound/
  - Not really needed, but I use it to get DIN MIDI in/out.

MIDI devices
  - Connect USB MIDI devices right into the Pi!
  - Use Pisound, or a USB audio/midi interface for DIN MIDI


= Operating System

In theory, any Raspian OS will work. I have both a standard issue Raspian
system, and a Patchbox OS (https://blokas.io/patchbox-os/) system. The later
is very simple, "just works", is set up for audio and MIDI - and is my main
development system now.


= Build Setup

One day I'll get this all properly set up with subrepos, but until then
you need this directory structure:

    projects/      -- can be anything you like
      amidiminder/ -- cloned from https://github.com/mzero/amidiminder.git
      bicycle/     -- cloned from https://github.com/mzero/bicycle.git
      ClearUI/     -- cloned from https://github.com/mzero/ClearUI.git
      ext/
        Adafruit-GFX-Library/ -- cloned from https://github.com/adafruit/Adafruit-GFX-Library.git
        Adafruit_SSD1306/     -- cloned from https://github.com/adafruit/Adafruit_SSD1306.git

You could set this up with:

    #!/bin/sh

    mkdir projets
    cd projects
    git clone https://github.com/mzero/amidiminder.git
    git clone https://github.com/mzero/bicycle.git
    git clone https://github.com/mzero/ClearUI.git
    mkdir ext
    cd ext
    git clone https://github.com/adafruit/Adafruit-GFX-Library.git
    git clone https://github.com/adafruit/Adafruit_SSD1306.git
    cd ..


= Build

    (cd amidiminder; make)
    (cd bicycle; make)


= Run

    amidiminder &   # one day this will be a system service
    bicycle &

Now hook your MIDI stuff up. For example:

    $ aconnect -l
    client 0: 'System' [type=kernel]
        0 'Timer           '
        1 'Announce        '
    client 14: 'Midi Through' [type=kernel]
        0 'Midi Through Port-0'
    client 20: 'nanoKONTROL' [type=kernel,card=1]
        0 'nanoKONTROL MIDI 1'
    client 24: 'pisound' [type=kernel,card=2]
        0 'pisound MIDI PS-3DJNWEF'
    client 28: 'Circuit' [type=kernel,card=3]
        0 'Circuit MIDI 1  '
    client 32: 'nanoKEY2' [type=kernel,card=4]
        0 'nanoKEY2 MIDI 1 '
    client 128: 'bicycle' [type=user,pid=23920]
        0 'controllers     '
        1 'synths          '

    $ aconnect nanoKONTROL:0 bicycle:0
    ALSA Seq error -2 in midi decode
    # ignore this error

    $ aconnect nanoKEY2:0 bicycle:0
    ALSA Seq error -2 in midi decode

    $ aconnect bicycle:1 Circuit:0

= Configuration

Currently all configuration is in the code itself. See the file bicycle.cpp
for how various channels and notes & ccs are mapped to the looper's functions.
Pretty much any other MIDI is simply recorded into the looper's layers, and
played back out verbatim. So besure the MIDI channel on your main controller
matches what the synth(s) want.



